#include <iostream>
#include <csignal>
#include <fstream>

/*Function declarations.*/
void deploy_hotspot(std::string *internet_interface, std::string *hotspot_interface, std::string *hotspot_ssid, std::string *hotspot_channel, std::string *hotspot_password);
void destroy_hotspot(int signum);

/*Main fucntion*/
int main(void)
{
    /*Set hotspot variables, perhaps pass these as arguments?*/
    std::string internet_interface = "";
    std::string hotspot_interface = ""; 
    std::string hotspot_ssid = "";
    std::string hotspot_channel = "";
    std::string hotspot_password = "";

    /*When Ctrl + C is caught execute the destroy hotspot function.*/
    signal(SIGINT, destroy_hotspot);

    /*Deploy the hotspot.*/ 
    deploy_hotspot(&internet_interface, &hotspot_interface, &hotspot_ssid, &hotspot_channel, &hotspot_password);
    
    while(true)
    {
        ;
    }
}

/*Deploy the hotspot function.*/ 
void deploy_hotspot(std::string *internet_interface, std::string *hotspot_interface, std::string *hotspot_ssid, std::string *hotspot_channel, std::string *hotspot_password)
{
    /*Create a hostapd configuration file and populat with appropriate variables.*/
    std::ofstream hostapd;
    hostapd.open("hostapd.conf");
    hostapd << "interface=" << *hotspot_interface << "\ndriver=nl80211\nssid=" << *hotspot_ssid << "\n" << 
    "hw_mode=g\nchannel=" << *hotspot_channel << "\nmacaddr_acl=0\nauth_algs=1\nwpa=2\nwpa_passphrase=" 
    << *hotspot_password << "\nwpa_key_mgmt=WPA-PSK\nwpa_pairwise=TKIP\nrsn_pairwise=CCMP\nignore_broadcast_ssid=0";
    hostapd.close();

    /*Create a dnsmasq configuration file and populate with appropriate variables.*/
    std::ofstream dnsmasq;
    dnsmasq.open("dnsmasq.conf");
    dnsmasq << "interface=" << *hotspot_interface << "\ndhcp-range=192.168.2.2,192.168.2.253,255.255.255.0,10m\n" <<
    "dhcp-option=3, 192.168.2.1\ndhcp-option=6, 192.168.2.1\ndhcp-option=28, 192.168.2.255\nserver=1.1.1.1\n"
    << "server=1.0.0.1\nlisten-address=127.0.0.1";
    dnsmasq.close();

    /*Setup firewall rules, start hostapd and dnsmasq.*/
    std::string deploy_hotspot = "";
    deploy_hotspot += "killall hostapd > /dev/null 2>&1;ifconfig " + *hotspot_interface + " up 192.168.2.1 netmask 255.255.255.0;";
    deploy_hotspot += "iptables -F;iptables -t nat -A POSTROUTING -o " + *internet_interface + " -j MASQUERADE;";
    deploy_hotspot += "iptables -A FORWARD -i " + *internet_interface + " -o " + *hotspot_interface + " -m state --state RELATED,ESTABLISHED -j ACCEPT;";
    deploy_hotspot += "iptables -A FORWARD -i " + *hotspot_interface + " -o " + *internet_interface + " -j ACCEPT;";
    deploy_hotspot += "sysctl -w net.ipv4.ip_forward=1 > /dev/null 2>&1;systemctl stop systemd-resolved;killall -9 dnsmasq > /dev/null 2>&1;";
    deploy_hotspot +="hostapd hostapd.conf -B > /dev/null 2>&1;printf \"# Generated by NetworkManager\nsearch lan\nnameserver 1.1.1.1\nnameserver 1.0.0.1\" > /etc/resolv.conf;";
    deploy_hotspot +="dnsmasq -C dnsmasq.conf";
    system(deploy_hotspot.c_str());
    std::cout << "Hotspot deployed ..." << std::endl;  
}

/*Function to destroy the hotspot.*/
void destroy_hotspot(int signum)
{   
    std::string destroy_hotspot = "";
    destroy_hotspot += "systemctl stop hostapd >/dev/null 2>&1;";
    destroy_hotspot += "systemctl stop dnsmasq >/dev/null 2>&1;";
    destroy_hotspot += "killall -2 hostapd >/dev/null 2>&1;";
    destroy_hotspot += "killall -9 dnsmasq >/dev/null 2>&1;";
    destroy_hotspot += "systemctl restart systemd-resolved;";
    destroy_hotspot += "iptables -F;";
    system(destroy_hotspot.c_str());
    std::cout << "\nHotspot destroyed ..." << std::endl;
    exit(signum);
}